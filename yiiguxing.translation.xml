<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="680" />
    <option name="newTranslationDialogY" value="330" />
    <histories>
      <item value="Shortcut: directly present on the element, with no merging needed?" />
      <item value="Get the fully qualified class names of all meta-annotation types &lt;em&gt;present&lt;em&gt; on the annotation (of the specified {@code annotationType}) on the supplied {@link AnnotatedElement}. &lt;p&gt;This method follows &lt;em&gt;get semantics&lt;em&gt; as described in the" />
      <item value="Get the fully qualified class names of all meta-annotation types" />
      <item value="qualified" />
      <item value="present&lt;em&gt; on the annotation" />
      <item value="Indicates that annotations with a type are to be documented by javadoc and similar tools by default. This type should be used to annotate the declarations of types whose annotations affect the use of annotated elements by their clients. If a type declaration is annotated with Documented, its annotations become part of the public API of the annotated elements." />
      <item value="the names of all meta-annotations present on the annotation, or an empty set if none found" />
      <item value="Get the fully qualified class names of all meta-annotation types &lt;em&gt;present&lt;em&gt; on the annotation (of the specified {@code annotationName}) on the supplied {@link AnnotatedElement}. &lt;p&gt;This method follows &lt;em&gt;get semantics&lt;em&gt; as described in the" />
      <item value="Get the fully qualified class names of all meta-annotation types &lt;em&gt;present&lt;em&gt; on the annotation (of the specified {@code annotationType}) on the supplied {@link AnnotatedElement}. &lt;p&gt;This method follows &lt;em&gt;get semantics&lt;em&gt; as described in the {@linkplain AnnotatedElementUtils class-level javadoc}. @param element the annotated element @param annotationType the annotation type on which to find meta-annotations @return the names of all meta-annotations present on the annotation, or an empty set if not found" />
      <item value="the repeatable containers that may be used by the element annotations or the meta-annotations" />
      <item value="annotations and meta-annotations from the specified element and," />
      <item value="Meta Annotation Types" />
      <item value="order" />
      <item value="specified" />
      <item value="provider" />
      <item value="the order source provider to use" />
      <item value="Callers will usually perform full methodfield introspection if {@code true} is being returned here" />
      <item value="if the class is known to have no such annotations at any level" />
      <item value="annotation" />
      <item value="Determine whether the given class is a candidate for carrying the specified annotation (at type, method or field level). @param clazz the class to introspect @param annotationName the fully-qualified name of the searchable annotation type @return {@code false} if the class is known to have no such annotations at any level; {@code true} otherwise. Callers will usually perform full methodfield introspection if {@code true} is being returned here." />
      <item value="has Plain Java Annotations Only" />
      <item value="determine whether the given class is a candidate for carrying one of the specified annotations (at type, method or field level)" />
      <item value="is Candidate Class" />
      <item value="implying that the aliased attribute is declared in the same annotation as &lt;em&gt;this&lt;em&gt; attribute." />
      <item value="The type of annotation in which the aliased {@link attribute} is declared." />
      <item value="The name of the attribute that &lt;em&gt;this&lt;em&gt; attribute is an alias for" />
      <item value="Explicit alias for attribute in meta-annotation: if the annotation attribute of @AliasFor is set to a different annotation than the one that declares it, the attribute is interpreted as an alias for an attribute in a meta-annotation (i.e., an explicit meta-annotation attribute override). This enables fine-grained control over exactly which attributes are overridden within an annotation hierarchy. In fact, with @AliasFor it is even possible to declare an alias for the value attribute of a meta-annotation." />
      <item value="Usage Scenarios&lt;h3&gt;" />
      <item value="that is used to" />
      <item value="is an annotation that is used to declare aliases for annotation attributes." />
      <item value="Abstract base class for {@link MergedAnnotation} implementations" />
      <item value="Abstract base class for {@link MergedAnnotation} implementati" />
      <item value="Duplicate" />
      <item value="generate Class" />
      <item value="factory" />
      <item value="seems that the loader has been expired from a weak reference somehow" />
      <item value="define" />
      <item value="internal" />
      <item value="For internal use by {@link Enhancer} only; see the {@link org.springframework.cglib.reflect.FastMethod} class for similar functionality." />
      <item value="Called by the garbage collector on an object when garbage collection determines that there are no more references to the object." />
      <item value="Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. In other words, this method behaves exactly as if it simply performs the call wait(0). The current thread must own this object's monitor. The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object's monitor to wake up either through a call to the notify method or the notifyAll method. The thread then waits until it can re-obtain ownership of the monitor and resumes execution. As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop: synchronized (obj) { while (&lt;condition does not hold&gt;) obj.wait(); ... Perform action appropriate to condition } This method should only be called by a thread that is the owner of this object's monitor. See the notify method for a description of the ways in which a thread can become the owner of a monitor. 抛出: IllegalMonitorStateException – if the current thread is not the owner of the object's monitor. InterruptedException – if any thread interrupted the current thread before or while the current thread was waiting for a notification. The interrupted status of the current thread is cleared when this exception is thrown. 请参阅: notify(), notifyAll()" />
      <item value="Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. In other words, this method behaves exactly as if it simply performs the call wait(0). The current thread must own this object's monitor. The thread releases ownership of this monitor and waits until another thread notifies threads waiting on this object's monitor to wake up either through a call to the notify method or the notifyAll method. The thread then waits until it can re-obtain ownership of the monitor and resumes execution." />
      <item value="Called by the garbage collector on an object when garbage collection" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="42" />
        <entry key="ENGLISH" value="43" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1668067750843" />
  </component>
  <component name="Settings">
    <option name="aliTranslateSettings">
      <app-key>
        <option name="appId" value="LTAI5tQq3rcYRLCfEGYnuKSo" />
      </app-key>
    </option>
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5724a07960ada74c" />
      </youdao-translate>
    </option>
  </component>
</application>